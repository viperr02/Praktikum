MODULE proc(semaphore)
VAR
	state : {idle, entering, critical, exiting};
INIT
	state=idle;
ASSIGN
	next(state) := 
		case
			state=idle : entering;
			state=entering & !semaphore : critical;
			state=critical : exiting;
			state=exiting  : idle;
			TRUE : state;
			esac;
	next(semaphore):=
		case
			next(state) = critical : TRUE;
			state = exiting : FALSE;
			TRUE : semaphore;
			esac;
	FAIRNESS
		running;

MODULE main
VAR
	semaphore : boolean;
	p1 : process proc (semaphore);
	p2 : process proc (semaphore);
INIT
	semaphore = FALSE;
SPEC AG (p1.state=critical -> !(p2.state=critical)) |
 (p2.state=critical -> !(p1.state=critical));
SPEC AG AF p1.state=idle;
SPEC AG AF p2.state=idle;


